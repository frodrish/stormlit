diff --git a/node_modules/@astrojs/starlight/components/Page.astro b/node_modules/@astrojs/starlight/components/Page.astro
index ac8ffbe..73437a7 100644
--- a/node_modules/@astrojs/starlight/components/Page.astro
+++ b/node_modules/@astrojs/starlight/components/Page.astro
@@ -105,12 +105,10 @@ if (pagefindEnabled) mainDataAttributes['data-pagefind-body'] = '';
 							</ContentPanel>
 						) : (
 							<>
+						    <PageTitle />
 								<ContentPanel>
-									<PageTitle />
 									{starlightRoute.entry.data.draft && <DraftContentNotice />}
 									{starlightRoute.isFallback && <FallbackContentNotice />}
-								</ContentPanel>
-								<ContentPanel>
 									<MarkdownContent>
 										<slot />
 									</MarkdownContent>
diff --git a/node_modules/@astrojs/starlight/components/PageTitle.astro b/node_modules/@astrojs/starlight/components/PageTitle.astro
index f8ede6e..7dd4cbe 100644
--- a/node_modules/@astrojs/starlight/components/PageTitle.astro
+++ b/node_modules/@astrojs/starlight/components/PageTitle.astro
@@ -1,17 +1,23 @@
 ---
 import { PAGE_TITLE_ID } from '../constants';
+import ContentPanel from 'virtual:starlight/components/ContentPanel';
 ---
+{ Astro.locals.starlightRoute.entry.data.title ? (
+<ContentPanel>
+	<h1 id={PAGE_TITLE_ID}>{Astro.locals.starlightRoute.entry.data.title}</h1>
 
-<h1 id={PAGE_TITLE_ID}>{Astro.locals.starlightRoute.entry.data.title}</h1>
-
-<style>
-	@layer starlight.core {
-		h1 {
-			margin-top: 1rem;
-			font-size: var(--sl-text-h1);
-			line-height: var(--sl-line-height-headings);
-			font-weight: 600;
-			color: var(--sl-color-white);
+	<style>
+		@layer starlight.core {
+			h1 {
+				margin-top: 1rem;
+				font-size: var(--sl-text-h1);
+				line-height: var(--sl-line-height-headings);
+				font-weight: 600;
+				color: var(--sl-color-white);
+			}
 		}
-	}
-</style>
+	</style>
+</ContentPanel>
+):
+	<span id={PAGE_TITLE_ID}></span>
+}
diff --git a/node_modules/@astrojs/starlight/utils/head.ts b/node_modules/@astrojs/starlight/utils/head.ts
index 85b74ad..00c9711 100644
--- a/node_modules/@astrojs/starlight/utils/head.ts
+++ b/node_modules/@astrojs/starlight/utils/head.ts
@@ -2,7 +2,7 @@ import config from 'virtual:starlight/user-config';
 import project from 'virtual:starlight/project-context';
 import { version } from '../package.json';
 import { type HeadConfig, HeadConfigSchema, type HeadUserConfig } from '../schemas/head';
-import type { PageProps, RouteDataContext } from './routing/data';
+import { type PageProps, type RouteDataContext,getTitle } from './routing/data';
 import { fileWithBase } from './base';
 import { formatCanonical } from './canonical';
 import { localizedUrl } from './localizedUrl';
@@ -16,6 +16,7 @@ export function getHead(
 	siteTitle: string
 ): HeadConfig {
 	const { data } = entry;
+	const title = getTitle(entry);
 
 	const canonical = context.site ? new URL(context.url.pathname, context.site) : undefined;
 	const canonicalHref = canonical?.href
@@ -32,7 +33,7 @@ export function getHead(
 			tag: 'meta',
 			attrs: { name: 'viewport', content: 'width=device-width, initial-scale=1' },
 		},
-		{ tag: 'title', content: `${data.title} ${config.titleDelimiter} ${siteTitle}` },
+		{ tag: 'title', content: `${title} ${config.titleDelimiter} ${siteTitle}` },
 		{ tag: 'link', attrs: { rel: 'canonical', href: canonicalHref } },
 		{ tag: 'meta', attrs: { name: 'generator', content: context.generator } },
 		{
@@ -49,7 +50,7 @@ export function getHead(
 			},
 		},
 		// OpenGraph Tags
-		{ tag: 'meta', attrs: { property: 'og:title', content: data.title } },
+		{ tag: 'meta', attrs: { property: 'og:title', content: title } },
 		{ tag: 'meta', attrs: { property: 'og:type', content: 'article' } },
 		{ tag: 'meta', attrs: { property: 'og:url', content: canonicalHref } },
 		{ tag: 'meta', attrs: { property: 'og:locale', content: lang } },
@@ -114,6 +115,7 @@ export function getHead(
 function createHead(defaults: HeadUserConfig, ...heads: HeadConfig[]) {
 	let head = HeadSchema.parse(defaults);
 	for (const next of heads) {
+		if(!next) continue;
 		head = mergeHead(head, next);
 	}
 	return sortHead(head);
diff --git a/node_modules/@astrojs/starlight/utils/navigation.ts b/node_modules/@astrojs/starlight/utils/navigation.ts
index 5fe09b8..e50d2f5 100644
--- a/node_modules/@astrojs/starlight/utils/navigation.ts
+++ b/node_modules/@astrojs/starlight/utils/navigation.ts
@@ -21,6 +21,7 @@ import {
 	stripLeadingAndTrailingSlashes,
 } from './path';
 import { getLocaleRoutes, routes } from './routing';
+import {getTitle} from './routing/data'
 import type {
 	SidebarGroup,
 	SidebarLink,
@@ -167,10 +168,9 @@ function linkFromInternalSidebarLinkItem(
 	const label =
 		pickLang(item.translations, localeToLang(locale)) ||
 		item.label ||
-		frontmatter.sidebar?.label ||
-		frontmatter.title;
-	const badge = item.badge ?? frontmatter.sidebar?.badge;
-	const attrs = { ...frontmatter.sidebar?.attrs, ...item.attrs };
+		getTitle(route.entry);
+	const badge = item.badge ?? frontmatter?.sidebar?.badge;
+	const attrs = { ...frontmatter?.sidebar?.attrs, ...item.attrs };
 	return makeSidebarLink(
 		slugToPathname(route.slug),
 		label,
@@ -240,7 +240,7 @@ function treeify(routes: Route[], locale: string | undefined, baseDir: string):
 	const treeRoot: Dir = makeDir(baseDir);
 	routes
 		// Remove any entries that should be hidden
-		.filter((doc) => !doc.entry.data.sidebar.hidden)
+		.filter((doc) => !doc.entry.data.sidebar?.hidden)
 		// Compute the path of each entry from the root of the collection ahead of time.
 		.map((doc) => [getRoutePathRelativeToCollectionRoot(doc, locale), doc] as const)
 		// Sort by depth, to build the tree depth first.
@@ -277,9 +277,9 @@ function treeify(routes: Route[], locale: string | undefined, baseDir: string):
 function linkFromRoute(route: Route, attrs?: LinkHTMLAttributes): SidebarLink {
 	return makeSidebarLink(
 		slugToPathname(route.slug),
-		route.entry.data.sidebar.label || route.entry.data.title,
-		route.entry.data.sidebar.badge,
-		{ ...attrs, ...route.entry.data.sidebar.attrs }
+		getTitle(route.entry),
+		route.entry.data.sidebar?.badge,
+		{ ...attrs, ...route.entry.data.sidebar?.attrs }
 	);
 }
 
@@ -291,7 +291,7 @@ function getOrder(routeOrDir: Route | Dir): number {
 	return isDir(routeOrDir)
 		? Math.min(...Object.values(routeOrDir).flatMap(getOrder))
 		: // If no order value is found, set it to the largest number possible.
-			(routeOrDir.entry.data.sidebar.order ?? Number.MAX_VALUE);
+			(routeOrDir.entry.data.sidebar?.order ?? Number.MAX_VALUE);
 }
 
 /** Sort a directoryâ€™s entries by user-specified order or alphabetically if no order specified. */
diff --git a/node_modules/@astrojs/starlight/utils/routing/data.ts b/node_modules/@astrojs/starlight/utils/routing/data.ts
index f968de5..628c3ae 100644
--- a/node_modules/@astrojs/starlight/utils/routing/data.ts
+++ b/node_modules/@astrojs/starlight/utils/routing/data.ts
@@ -158,3 +158,22 @@ async function get404Route(locals: App.Locals): Promise<Route> {
 	const entry = userEntry ? normalizeCollectionEntry(userEntry) : fallbackEntry;
 	return { ...entryMeta, entryMeta, entry, id: entry.id, slug: entry.slug };
 }
+
+export function getTitle(entry: StarlightDocsEntry) {
+	return entry.data?.sidebar?.label || entry.data?.title || transformPath(entry.filePath);
+}
+
+function transformPath(path: string): string {
+	const idx = path.lastIndexOf('/');
+	let lastSegment = idx !== -1 ? path.substring(idx + 1) : path;
+	// Remove file extension if present
+	const dotIdx = lastSegment.lastIndexOf('.');
+	if (dotIdx > 0) lastSegment = lastSegment.substring(0, dotIdx);
+	// Replace - and _ with space, and uppercase the first letter after each separator
+	lastSegment = lastSegment.replace(/[-_](\w)/g, (_, c) => ' ' + c.toUpperCase());
+	// Add space before camelCase words (e.g., 'myPluginName' -> 'my Plugin Name')
+	lastSegment = lastSegment.replace(/([a-z])([A-Z])/g, '$1 $2');
+	// Uppercase the first character
+	lastSegment = lastSegment.charAt(0).toUpperCase() + lastSegment.slice(1);
+	return lastSegment;
+}
diff --git a/node_modules/@astrojs/starlight/utils/routing/index.ts b/node_modules/@astrojs/starlight/utils/routing/index.ts
index 460d15a..a47d49c 100644
--- a/node_modules/@astrojs/starlight/utils/routing/index.ts
+++ b/node_modules/@astrojs/starlight/utils/routing/index.ts
@@ -42,7 +42,7 @@ export function normalizeCollectionEntry(entry: StarlightDocsCollectionEntry): S
 const docs: StarlightDocsEntry[] = (
 	(await getCollection('docs', ({ data }) => {
 		// In production, filter out drafts.
-		return import.meta.env.MODE !== 'production' || data.draft === false;
+		return import.meta.env.MODE !== 'production' || data.draft != true;
 	})) ?? []
 ).map(normalizeCollectionEntry);
 
